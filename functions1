#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/wait.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_ARGUMENTS 10

void execute_command(char *args[]) {
    pid_t pid, wpid;
    int status;

    pid = fork();

    if (pid == 0) {
        // Child process
        if (execvp(args[0], args) == -1) {
            perror("shell");
        }
        exit(EXIT_FAILURE);
    } else if (pid < 0) {
        perror("shell");
    } else {
        // Parent process
        do {
            wpid = waitpid(pid, &status, WUNTRACED);
        } while (!WIFEXITED(status) && !WIFSIGNALED(status));
    }
}

int main() {
    char input[MAX_COMMAND_LENGTH];
    char *args[MAX_ARGUMENTS];
    int should_run = 1;

    while (should_run) {
        // Print the shell prompt
        printf("shell> ");

        // Read user input
        fgets(input, MAX_COMMAND_LENGTH, stdin);

        // Remove the newline character from the input
        input[strcspn(input, "\n")] = '\0';

        // Tokenize the input into arguments
        char *token = strtok(input, " ");
        int arg_count = 0;

        while (token != NULL && arg_count < MAX_ARGUMENTS - 1) {
            args[arg_count++] = token;
            token = strtok(NULL, " ");
        }

        // Null-terminate the arguments array
        args[arg_count] = NULL;

        // Check for exit command
        if (strcmp(args[0], "exit") == 0) {
            should_run = 0;
        } else {
            // Execute the command
            execute_command(args);

